@using System.Text.RegularExpressions

<span>@((MarkupString)(htmlString ?? ""))</span>

@code {
    private static readonly Regex regexDecoUppercaseStrip = new Regex(@"(\$t(?!.*\$z).*)\$t", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    private static readonly Regex regexDecoItalicStrip = new Regex(@"(\$i(?!.*\$z).*)\$i", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    private static readonly Regex regexDecoBoldStrip = new Regex(@"(\$o(?!.*\$z).*)\$o", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    private static readonly Regex regexDecoUppercaseWithZ = new Regex(@"\$t(.+)(?=\$z)", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    private static readonly Regex regexDecoItalicWithZ = new Regex(@"\$i(.+)(?=\$z)", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    private static readonly Regex regexDecoBoldWithZ = new Regex(@"\$o(.+)(?=\$z)", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    private static readonly Regex regexDecoUppercase = new Regex(@"\$t(.+)", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    private static readonly Regex regexDecoItalic = new Regex(@"\$i(.*)", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    private static readonly Regex regexDecoBold = new Regex(@"\$o(.*)", RegexOptions.IgnoreCase | RegexOptions.Compiled);

    private static readonly Regex regexColor3WithZ = new Regex(@"\$([0-9a-f]{3})(.*?)(?=\$[0-9a-f]|\$z)", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    private static readonly Regex regexColor2WithZ = new Regex(@"\$([0-9a-f]{2})(.*?)(?=\$[0-9a-f]|\$z)", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    private static readonly Regex regexColor1WithZ = new Regex(@"\$([0-9a-f]{1})(.*?)(?=\$[0-9a-f]|\$z)", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    private static readonly Regex regexColor3 = new Regex(@"\$([0-9a-f]{3})(.+?$)", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    private static readonly Regex regexColor2 = new Regex(@"\$([0-9a-f]{2})(.+?$)", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    private static readonly Regex regexColor1 = new Regex(@"\$([0-9a-f]{1})(.+?$)", RegexOptions.IgnoreCase | RegexOptions.Compiled);
    private static readonly Regex regexColorEmpty = new Regex(@"\$([a-fA-F0-9]{3})", RegexOptions.IgnoreCase | RegexOptions.Compiled);

    private static readonly Regex regexDeformatRest = new Regex(@"\$(m|n|z|w|s|l\[.*\]|h\[.*\]|l|h)", RegexOptions.IgnoreCase | RegexOptions.Compiled);

    private string? htmlString;

    [Parameter]
    public string? Text { get; set; }

    protected override void OnParametersSet()
    {
        if (Text is null)
        {
            htmlString = null;
            return;
        }

        htmlString = Text.Replace("$g", "$888");

        htmlString = regexDecoUppercaseStrip.Replace(htmlString, "$1");
        htmlString = regexDecoItalicStrip.Replace(htmlString, "$1");
        htmlString = regexDecoBoldStrip.Replace(htmlString, "$1");

        htmlString = regexDecoUppercaseWithZ.Replace(htmlString, "<span style=\"text-transform: uppercase;\">$1</span>");
        htmlString = regexDecoItalicWithZ.Replace(htmlString, "<i>$1</i>");
        htmlString = regexDecoBoldWithZ.Replace(htmlString, "<b>$1</b>");

        htmlString = regexDecoUppercase.Replace(htmlString, "<span style=\"text-transform: uppercase;\">$1</span>");
        htmlString = regexDecoItalic.Replace(htmlString, "<i>$1</i>");
        htmlString = regexDecoBold.Replace(htmlString, "<b>$1</b>");

        htmlString = regexColor3WithZ.Replace(htmlString, "<span style=\"color:#$1\">$2</span>");
        htmlString = regexColor2WithZ.Replace(htmlString, "<span style=\"color:#$10\">$2</span>");
        htmlString = regexColor1WithZ.Replace(htmlString, "<span style=\"color:#$100\">$2</span>");

        htmlString = regexColor3.Replace(htmlString, "<span style=\"color:#$1\">$2</span>");
        htmlString = regexColor2.Replace(htmlString, "<span style=\"color:#$10\">$2</span>");
        htmlString = regexColor1.Replace(htmlString, "<span style=\"color:#$100\">$2</span>");

        htmlString = regexColorEmpty.Replace(htmlString, "");

        htmlString = regexDeformatRest.Replace(htmlString, "").Replace("$$", "$");
    }
}