@using System.Collections.Specialized;

@inject IGbxService GbxService
@inject NavigationManager NavMgr

<div class="rectangle imported-gbxs">

    @{
        var gbxs = FilterGbxsBySuggestedTypes(GbxService.Gbxs);
        var any = gbxs.Any();
    }

    <div class="gbx-list @(any ? "" : "centered-note")">

        @if (any)
        {
            foreach (var gbx in FilterGbxsBySuggestedTypes(GbxService.Gbxs))
            {
                <div class="@(GbxSelection.Contains(gbx) ? "selected" : "")" @onclick="() => ChangeGbxSelection(gbx)">
                    @gbx.FileName
                </div>
            }
        }
        else
        {
            <span>Please import related files...</span>
        }

    </div>
    <div style="display:flex;gap: 8px;">
        <button class="button-util" @onclick="SelectAll" disabled="@SingleSelection">Select all</button>
        <button class="button-util" @onclick="DeselectAll">Deselect all</button>
        <button class="button-util" style="flex: 1" disabled>Auto-@(Produces ? "produce" : "proceed")</button>
    </div>

    @if (CanProceed)
    {
        if (Produces)
        {
            <a href="@NavMgr.GetUriWithQueryParameter("produce", "selected")" class="button proceed-general">Produce</a>
        }
        else
        {
            <a href="@NavMgr.GetUriWithQueryParameter("proceed", "selected")" class="button proceed-general">Proceed</a>
        }
    }
    else
    {
        <button class="proceed-general" disabled>@(Produces ? "Produce" : "Proceed")</button>
    }

</div>

@code {
    private HashSet<string>? suggestedTypeNames;

    [Parameter]
    public bool Produces { get; set; }

    public bool CanProceed { get; private set; }

    [Parameter]
    [EditorRequired]
    public HashSet<GbxModel> GbxSelection { get; set; } = new();

    [Parameter]
    [EditorRequired]
    public IEnumerable<UtilImportType> ImportTypes { get; set; } = Enumerable.Empty<UtilImportType>();

    [Parameter]
    [EditorRequired]
    public EventCallback SelectionChanged { get; set; }

    [Parameter]
    public bool SingleSelection { get; set; }

    protected override void OnInitialized()
    {
        suggestedTypeNames = ImportTypes.SelectMany(x => x.Parameters)
            .Select(x => x.TypeName)
            .Distinct()
            .ToHashSet();

        GbxService.Gbxs.CollectionChanged += Gbxs_CollectionChanged;

        UpdateCanProceed();
    }

    private async void Gbxs_CollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        var selectionChanged = false;

        if (e.NewItems is not null)
        {
            foreach (var gbx in FilterGbxsBySuggestedTypes(e.NewItems.OfType<GbxModel>()))
            {
                if (SingleSelection && GbxSelection.Count >= 1)
                {
                    GbxSelection.Clear();
                }

                GbxSelection.Add(gbx);
                selectionChanged = true;
            }
        }

        if (e.OldItems is not null)
        {
            foreach (var gbx in FilterGbxsBySuggestedTypes(e.OldItems.OfType<GbxModel>()))
            {
                GbxSelection.Remove(gbx);
                selectionChanged = true;
            }
        }

        if (selectionChanged)
        {
            await OnSelectionChanged();
        }

        StateHasChanged();
    }

    private IEnumerable<GbxModel> FilterGbxsBySuggestedTypes(IEnumerable<GbxModel> gbxs)
    {
        return gbxs.Where(IsSuggested);
    }

    private bool IsSuggested(GbxModel gbx)
    {
        if (suggestedTypeNames is null)
        {
            return true;
        }

        if (gbx.Text is not null)
        {
            return suggestedTypeNames.Contains(nameof(TextFile)) || suggestedTypeNames.Contains(nameof(String));
        }

        if (gbx.Type is not null)
        {
            return suggestedTypeNames.Contains(gbx.Type.Name);
        }

        return false;
    }

    private async Task ChangeGbxSelection(GbxModel gbx)
    {
        if (GbxSelection.Contains(gbx))
        {
            GbxSelection.Remove(gbx);
        }
        else
        {
            if (SingleSelection)
            {
                GbxSelection.Clear();
            }
            
            GbxSelection.Add(gbx);
        }

        await OnSelectionChanged();
    }

    private async Task SelectAll()
    {
        if (SingleSelection)
        {
            return;
        }

        foreach (var gbx in FilterGbxsBySuggestedTypes(GbxService.Gbxs))
        {
            GbxSelection.Add(gbx);
        }

        await OnSelectionChanged();
    }

    private async Task DeselectAll()
    {
        foreach (var gbx in FilterGbxsBySuggestedTypes(GbxService.Gbxs))
        {
            GbxSelection.Remove(gbx);
        }

        await OnSelectionChanged();
    }

    private async Task OnSelectionChanged()
    {
        var gbxModelByTypeName = GbxSelection.ToLookup(x =>
        {
            if (x.Text is not null)
            {
                return nameof(TextFile);
            }

            return x.Type?.Name;
        });

        foreach (var importType in ImportTypes)
        {
            importType.Invalid = false;

            var hasMultiParamAlready = false;

            foreach (var param in importType.Parameters)
            {
                param.ImportedFiles = gbxModelByTypeName[param.TypeName].ToArray();

                if (param.ImportedFiles.Length > 1)
                {
                    if (hasMultiParamAlready)
                    {
                        importType.Invalid = true;
                        break;
                    }

                    hasMultiParamAlready = true;
                }
            }
        }

        UpdateCanProceed();

        await SelectionChanged.InvokeAsync();
    }

    private void UpdateCanProceed()
    {
        foreach (var importType in ImportTypes)
        {
            CanProceed = true;

            var parameters = importType.Parameters;

            for (var i = 0; i < parameters.Count; i++)
            {
                var p = parameters[i];
                var importedFile = p.ImportedFiles.Length > 0;

                if (!importedFile || importType.Invalid)
                {
                    CanProceed = false;
                }
            }

            if (CanProceed)
            {
                break;
            }
        }
    }
}
