@using System.Reflection;
@using System.Text.Json;

@inject IDownloadService DownloadService
@inject IPropertyValueDisplayService PropValDisplay
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject Blazored.LocalStorage.ISyncLocalStorageService SyncLocalStorage

@if (Configs.Count > 0)
{
    <div class="rectangle config">
        <h4>Config</h4>
        <div class="config-bar">
            <select class="button-util" style="flex:1" @bind="SelectedConfigName">
                <option value="Default">Default</option>

                @foreach (var (name, _) in Configs.Where(x => x.Key != "Default"))
                {
                    <option value="@name">@name</option>
                }

            </select>
            <button class="button-util" @onclick="SaveConfigAs">Save as...</button>
            <button class="button-util" @onclick="ResetConfig">Reset</button>
        </div>
        <div class="config-bar">
            <button class="button-util" style="flex:1">Import from .yml</button>
            <button class="button-util" style="flex:1" @onclick="ExportConfigToYml">Export to .yml</button>
        </div>

        @{
            if (!Configs.TryGetValue(SelectedConfigName, out var config))
            {
                SelectedConfigName = "Default";
                config = Configs[SelectedConfigName];
            }

            var type = config.GetType();
            var props = type.GetProperties();
        }

        @if (props.Length == 0)
        {
            <div class="centered-note" style="margin: 10px 0 0 0;">TBA</div>
        }
        else
        {
            var textDictionaryInterface = type.GetInterfaces().FirstOrDefault(x => x.IsGenericType && x.GetGenericTypeDefinition() == typeof(IHasTextDictionary<>));

            <div class="config-grid">
                @foreach (var prop in props)
                {
                    if (textDictionaryInterface is not null && prop.Name == "Dictionary" && prop.PropertyType == textDictionaryInterface.GetGenericArguments()[0])
                    {
                        continue;
                    }

                    <label for="config-@prop.Name" style="overflow: hidden;">@prop.Name</label>

                    @if (PropValDisplay.TryGetComponent(prop.PropertyType, out var componentType))
                    {
                        <DynamicComponent Type="componentType" Parameters="GetPropertyValueDisplayParameters(prop, config, Route)" />
                    }
                    else
                    {
                        <div style="color: gray;padding:0 8px">@prop.GetValue(config)</div>
                    }
                }
            </div>


            <div class="config-bar">
                <button style="flex:1">Dictionary</button>
            </div>
        }
    </div>
}

@code {
    private string selectedConfigName = "Default";

    public string SelectedConfigName
    {
        get => selectedConfigName;
        set
        {
            selectedConfigName = value;
            SyncLocalStorage.SetItemAsString($"Tool:{Route}:Config:Selected", selectedConfigName);
            OnConfigChanged();
        }
    }

    [Parameter]
    [EditorRequired]
    public string? Route { get; set; }

    [Parameter]
    [EditorRequired]
    public Dictionary<string, Config> Configs { get; set; } = new();

    [Parameter]
    public EventCallback ConfigChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SelectedConfigName = await LocalStorage.GetItemAsStringAsync($"Tool:{Route}:Config:Selected") ?? "Default";
    }

    private Dictionary<string, object?> GetPropertyValueDisplayParameters(PropertyInfo property, object owner, string toolRoute)
    {
        return new()
        {
            { "Property", property },
            { "Owner", owner },
            { "ToolRoute", toolRoute },
            { "ToolConfig", owner },
            { "ToolConfigName", SelectedConfigName },
            { "ConfigChanged", ConfigChanged },
        };
    }

    private async Task ExportConfigToYml()
    {
        if (Configs.TryGetValue(SelectedConfigName, out var config))
        {
            await DownloadService.DownloadAsync($"{SelectedConfigName}.yml", Yml.Serializer.Serialize(config), "text/yaml");
        }
    }

    private async Task ResetConfig()
    {
        var newConfig = (Config)Activator.CreateInstance(Configs[SelectedConfigName].GetType())!;

        Configs[SelectedConfigName] = newConfig;

        var configList = await LocalStorage.GetItemAsync<Dictionary<string, object>>($"Tool:{Route}:Config");

        if (configList is null || configList.Count == 0)
        {
            return;
        }

        configList[SelectedConfigName] = newConfig;

        await LocalStorage.SetItemAsync($"Tool:{Route}:Config", configList);
    }

    private async Task SaveConfigAs()
    {
        var configToSave = Configs[SelectedConfigName];

        var configList = await LocalStorage.GetItemAsync<Dictionary<string, object>>($"Tool:{Route}:Config") ?? new();

        var configName = $"Config{configList.Count}";

        configList[configName] = configToSave;

        await LocalStorage.SetItemAsync($"Tool:{Route}:Config", configList);

        // weird trick to disjoin reference without deep clone
        var configsTemp = await LocalStorage.GetItemAsync<Dictionary<string, JsonDocument>>($"Tool:{Route}:Config");

        Configs[configName] = (Config)JsonSerializer.Deserialize(configsTemp[configName], configToSave.GetType(), Json.DefaultOptions)!;

        SelectedConfigName = configName;
    }

    private async void OnConfigChanged()
    {
        await ConfigChanged.InvokeAsync();
    }
}
