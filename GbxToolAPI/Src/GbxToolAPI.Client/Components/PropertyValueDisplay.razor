@using System.Reflection;
@using GbxToolAPI;

@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage

@code {
    [Parameter]
    public PropertyInfo? Property { get; set; }

    [Parameter]
    public object? Owner { get; set; }

    [Parameter]
    public string? ToolRoute { get; set; }

    [Parameter]
    public string? ToolConfigName { get; set; }

    [Parameter]
    public Config? ToolConfig { get; set; }

    [Parameter]
    public EventCallback ConfigChanged { get; set; }

    protected object? GetValue()
    {
        if (Owner is null)
        {
            return null;
        }

        return Property?.GetValue(Owner);
    }

    protected void SetValue(object? value)
    {
        if (Owner is null || Property is null)
        {
            return;
        }

        Property.SetValue(Owner, value);

        if (ToolRoute is not null && ToolConfig is not null && ToolConfigName is not null)
        {
            var configList = LocalStorage.GetItem<Dictionary<string, object>>($"Tool:{ToolRoute}:Config") ?? new();

            configList[ToolConfigName] = ToolConfig;

            LocalStorage.SetItem($"Tool:{ToolRoute}:Config", configList);
        }

        OnConfigChanged();
    }

    private async void OnConfigChanged()
    {
        await ConfigChanged.InvokeAsync();
    }
}
